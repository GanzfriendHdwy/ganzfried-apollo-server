const { ApolloServer, gql } = require("apollo-server");
const db = require("./models");
const { Link } = db;

const generateSlug = () => {
  var chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNPQRSTUVWXYZ";
  var slug = "";
  const randIdx = () => Math.floor(Math.random() * chars.length);
  for (var i = 0; i < 4; i++) {
    slug += chars[randIdx()];
  }
  return slug;
};

const isNewSlug = async (slug) => {
  const isUsed = await Link.findOne({
    where: { slug }
  });
  console.log(isUsed);
  return isUsed ? false : true;
};

const verifySlug = (slug) => {
  const regexExp = /^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$/g;
  const autoGenerated = generateSlug();
  return regexExp.test(slug) && isNewSlug(slug)
    ? slug
    : verifySlug(autoGenerated);
};

/* I could build modifyUrl out more if we wanted to make the urls more unique */
// const modifyUrl = (url, slug) => {
//   // ex: https://sequelize.org/master/class/lib/model.js~Model.html
//   // modified ex: https://hdwy.link/slug
//   return `https://hdwy.link/${slug}`;
// };

const typeDefs = gql`
  type Link {
    url: String!
    slug: String!
    modifiedUrl: String!
  }

  type Query {
    links: [Link]
  }

  type Mutation {
    createLink(url: String!, slug: String!, modifiedUrl: String): Link!
  }
`;

const resolvers = {
  Query: {
    links: async () => {
      return await Link.findAll();
    }
  },
  Mutation: {
    async createLink({ url, slug }) {
      console.log("link has been created", url, slug);
      const verifiedSlug = verifySlug(slug);
      // const modifiedUrl = modifyUrl(url, verifiedSlug);
      return Link.create({
        url,
        slug: verifiedSlug,
        modifiedUrl: `https://hdwy.link/${verifiedSlug}`
      });
    }
  }
};

const server = new ApolloServer({
  typeDefs,
  resolvers
});

server.listen().then(({ url }) => {
  console.log(`ðŸš€ Server ready at ${url}`);
});

// const resolvers = {
//   Query: {
//     async user(root, { id }, { models }) {
//       return models.User.findById(id);
//     },
//     async allRecipes(root, args, { models }) {
//       return models.Recipe.findAll();
//     },
//     async recipe(root, { id }, { models }) {
//       return models.Recipe.findById(id);
//     },
//   },
// };
